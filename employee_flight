CREATE PROCEDURE insIntoEmployee_Flight
@EmFname VARCHAR(20), 
@EmLname VARCHAR(20),
@EmployeePho VARCHAR(100),
@Flight_Num_ INT
AS
DECLARE @EmID INT, @F_ID INT

EXEC getEventID
EmployeeFnamey = @EmFname,
EmployeeLnamey = @EmLname,
EmployeePhoney = @EmployeePho,
EmployeeIDy = @EmID OUTPUT

-- Error handle @EmID in case if it's NULL/empty
IF @EmID IS NULL
BEGIN 
    PRINT '@EmID is empty and this will cause the transaction to be failed';
    THROW 51000, '@EmID cannot be NULL', 1;
END

EXEC getFlightID
@FNum = @Flight_Num_,
@FlightID = @F_ID OUTPUT

-- Error handle @F_ID in case if it's NULL/empty
IF @F_ID IS NULL
BEGIN 
    PRINT '@F_ID is empty and this will cause the transaction to be failed';
    THROW 51000, '@F_ID cannot be NULL', 1;
END

BEGIN TRAN T1
    INSERT INTO tblEmployee_Flight
    (FlightID, EmployeeID)
    VALUES 
    (@EmID, @F_ID)
    IF @@ERROR <> 0
        BEGIN 
            PRINT 'There is an error - rolling back transaction T1'
            ROLLBACK TRAN T1
        END
    ELSE
COMMIT TRAN T1
GO


--wrapper for employee_flight
CREATE PROCEDURE uspWRAPPER_newemployee_flight
@Run INT 
AS
DECLARE @EmployeeCount INT = (SELECT COUNT(*) FROM tblEmployee)
DECLARE @FlightCount INT = (SELECT COUNT(*) FROM tblFlight)

DECLARE @EmFname_ VARCHAR(20), @EmLname_ VARCHAR(20), @EmployeePho_ VARCHAR(100), @FlightNum_ INT


DECLARE @PK INT

WHILE @Run > 0 
BEGIN

SET @PK = (SELECT RAND() * @EventCount + 1)
SET @EmFname_ = (SELECT EmployeeFname FROM tblEmployee WHERE EmployeeID = @PK)
SET @EmLname_ = (SELECT EmployeeLname FROM tblEmployee WHERE EmployeeID = @PK)
SET  = (SELECT EmployeePhone FROM tblEmployee WHERE EmployeeID = @PK)

SET @PK = (SELECT RAND() * @FlightCount + 1)
SET @FlightNum_ = (SELECT flightnum FROM tblFlight WHERE FlightID = @PK)

EXEC [insIntoEmployee_Flight]
@EmFname = @EmFname_,
@EmLname = @EmLname_,
@EmployeePho = @EmployeePho_,
@Flight_Num_ = @Fnum
SET @Run = @Run - 1
END

EXEC uspWRAPPER_newemployee_flight @Run = 1000;
GO
