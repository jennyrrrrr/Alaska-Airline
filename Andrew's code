--Adding Foreign Keys
ALTER TABLE tblFlight
ADD CONSTRAINT FK_DepartureAirportID
 FOREIGN KEY (DepartureAirportID) REFERENCES tblAirport(AirportID);
GO

ALTER TABLE tblFlight
ADD CONSTRAINT FK_ArrivalAirportID
 FOREIGN KEY (ArrivalAirportID) REFERENCES tblAirport(AirportID);
GO

--#########GETID#############--
--Get BookingID
CREATE PROCEDURE getBookingID
@Passenger_Fnameb VARCHAR(50),
@Passenger_Lnameb VARCHAR(50),
@Passenger_Birthb DATE,
@FlightHrsb INT,
@FeeNameb VARCHAR(20), 
@CustomerFnameb VARCHAR(50),
@CustomerLnameb VARCHAR(50),
@OrderDateb DATE, 
@BookingAmountb FLOAT, 
@BookingID INT OUTPUT
AS
DECLARE @PID_ INT, @FID_ INT, @FEID_ INT, @OID_ INT

EXEC uspGetPassengerID
@Passenger_Fname = @Passenger_Fnameb,
@Passenger_Lname = @Passenger_Lnameb,
@Passenger_Birth = @Passenger_Birthb,
@Passenger_ID = @PID_ OUTPUT

-- Error handle @PID_ in case if it's NULL/empty
IF @PID_ IS NULL
BEGIN 
    PRINT '@PID_ is empty and this will cause the transaction to be failed';
    THROW 51000, '@PID_ cannot be NULL', 1;
END

EXEC getFlightID
@FlightHrs = @FlightHrsb,
@FlightID = @FID_ OUTPUT

-- Error handle @FID_ in case if it's NULL/empty
IF @FID_ IS NULL
BEGIN 
    PRINT '@FID_ is empty and this will cause the transaction to be failed';
    THROW 51000, '@FID_ cannot be NULL', 1;
END

EXEC getFeeID
@FeeName = @FeeNameb,
@FeeID = @FEID_ OUTPUT

-- Error handle @FEID_ in case if it's NULL/empty
IF @FEID_ IS NULL
BEGIN 
    PRINT '@FEID_ is empty and this will cause the transaction to be failed';
    THROW 51000, '@FEID_ cannot be NULL', 1;
END

EXEC getOrderID
@CustomerFname = @CustomerFnameb,
@CustomerLname = @CustomerLnameb,
@OrderDate = @OrderDateb,
@OrderID = @OID_ OUTPUT

-- Error handle @CustomerID in case if it's NULL/empty
IF @OID_ IS NULL
BEGIN 
    PRINT '@OID_ is empty and this will cause the transaction to be failed';
    THROW 51000, '@OID_ cannot be NULL', 1;
END

SET @BookingID = 
    (SELECT BookingID FROM tblBooking WHERE PassengerID = @PID_ AND FlightID = @FID_
    AND FeeID = @FEID_ AND OrderID = @OID_ AND BookingAmount = @BookingAmountb)
GO   

--getDepartureAirportID--
CREATE PROCEDURE getDepartureAirportID 
@Airport_Ltrs VARCHAR(5),
@DepartureAirportID INT OUTPUT
AS 
DECLARE @AIRID INT
    
EXEC getAirportID
@AirportLtrs = @Airport_Ltrs,
@AirportID = @AIRID OUTPUT

-- Error handle if in case if it's NULL/ empty
IF @AIRID IS NULL
BEGIN 
    PRINT '@AIRID is empty and this will cause the transaction to be failed';
    THROW 51000, '@AIRID cannot be NULL', 1;
END

SET @DepartureAirportID = (SELECT @DepartureAirportID FROM tblAirport WHERE AirportID = @AIRID)
GO

--getArrivalAirportID--
CREATE PROCEDURE getArrivalAirportID 
@Airport_Ltrs VARCHAR(5),
@ArrivalAirportID INT OUTPUT
AS 
DECLARE @DEPID INT
    
EXEC getAirportID
@AirportLtrs = @Airport_Ltrs,
@AirportID = @DEPID OUTPUT

-- Error handle if in case if it's NULL/ empty
IF @DEPID IS NULL
BEGIN 
    PRINT '@DEPID is empty and this will cause the transaction to be failed';
    THROW 51000, '@DEPID cannot be NULL', 1;
END

SET @ArrivalAirportID = (SELECT @ArrivalAirportID FROM tblAirport WHERE AirportID = @DEPID)
GO

--GetFlightID--
CREATE PROCEDURE getFlightID
@AT_Name VARCHAR(50),
@Date_ DATE,
@FlightType_Name_ VARCHAR(20), 
@FlightType_Descr_ VARCHAR(100),
@AirportLtrs VARCHAR(5),
@ArrivalTime TIME,
@DepartureTime TIME,
@FlightHrs_ INT, 
@FlightID INT OUTPUT
AS
DECLARE @AID_ INT, @FLTID_ INT, @DEP_ID INT, @ARR_ID INT

EXEC getAirplaneID
@ATName = @AT_Name,
@Date = @Date_,
@AirplaneID = @AID_ OUTPUT

-- Error handle @AID_ in case if it's NULL/empty
IF @AID_ IS NULL
BEGIN 
    PRINT '@AID_ is empty and this will cause the transaction to be failed';
    THROW 51000, '@AID_ cannot be NULL', 1;
END

EXEC getFlight_TypeID
@FlightType_Name = @FlightType_Name_,
@FlightType_Descr = @FlightType_Descr_,
@FlightType_ID = @FLTID_ OUTPUT

-- Error handle @FLTID_ in case if it's NULL/empty
IF @FLTID_ IS NULL
BEGIN 
    PRINT '@FLTID_ is empty and this will cause the transaction to be failed';
    THROW 51000, '@FLTID_ cannot be NULL', 1;
END

EXEC getDepartureAirportID
@Airport_Ltrs = @AirportLtrs,
@DepartureAirportID = @DEP_ID OUTPUT

-- Error handle @DEP_ID in case if it's NULL/empty
IF @DEP_ID IS NULL
BEGIN 
    PRINT '@DEP_ID is empty and this will cause the transaction to be failed';
    THROW 51000, '@DEP_ID cannot be NULL', 1;
END

EXEC getArrivalAirportID
@Airport_Ltrs = @AirportLtrs,
@ArrivalAirportID = @ARR_ID OUTPUT

-- Error handle @CustomerID in case if it's NULL/empty
IF @ARR_ID IS NULL
BEGIN 
    PRINT '@ARR_ID is empty and this will cause the transaction to be failed';
    THROW 51000, '@ARR_ID cannot be NULL', 1;
END

SET @FlightID = 
    (SELECT FlightID FROM tblFlight WHERE AirplaneID = @AID_ AND FlightTypeID = @FLTID_
    AND DepartureAirportID = @DEP_ID AND ArrivalAirportID = @ARR_ID AND ArrivalTime = @ArrivalTime
    AND DepartureTime = @DepartureTime AND FlightHrs = @FlightHrs_)
GO
--#########INSERTS#############--
--insert into tblFlight--
CREATE PROCEDURE insIntoFlight
@AT_Namea VARCHAR(50),
@Date_a DATE,
@FlightType_Name_a VARCHAR(20), 
@FlightType_Descr_a VARCHAR(100),
@AirportLtrsa VARCHAR(5),
@ArrivalTimea TIME,
@DepartureTimea TIME,
@FlightHrs_a INT
AS
DECLARE @AID_a INT, @FLTID_a INT, @DEP_IDa INT, @ARR_IDa INT

EXEC getAirplaneID
@ATName = @AT_Namea,
@Date = @Date_a,
@AirplaneID = @AID_a OUTPUT

-- Error handle @AID_a in case if it's NULL/empty
IF @AID_a IS NULL
BEGIN 
    PRINT '@AID_a is empty and this will cause the transaction to be failed';
    THROW 51000, '@AID_a cannot be NULL', 1;
END

EXEC getFlight_TypeID
@FlightType_Name = @FlightType_Name_a,
@FlightType_Descr = @FlightType_Descr_a,
@FlightType_ID = @FLTID_a OUTPUT

-- Error handle @FLTID_a in case if it's NULL/empty
IF @FLTID_a IS NULL
BEGIN 
    PRINT '@FLTID_a is empty and this will cause the transaction to be failed';
    THROW 51000, '@FLTID_a cannot be NULL', 1;
END

EXEC getDepartureAirportID
@Airport_Ltrs = @AirportLtrsa,
@DepartureAirportID = @DEP_IDa OUTPUT

-- Error handle @DEP_ID in case if it's NULL/empty
IF @DEP_IDa IS NULL
BEGIN 
    PRINT '@DEP_IDa is empty and this will cause the transaction to be failed';
    THROW 51000, '@DEP_IDa cannot be NULL', 1;
END

EXEC getArrivalAirportID
@Airport_Ltrs = @AirportLtrsa,
@ArrivalAirportID = @ARR_IDa OUTPUT

-- Error handle @ARR_IDa in case if it's NULL/empty
IF @ARR_IDa IS NULL
BEGIN 
    PRINT '@ARR_IDa is empty and this will cause the transaction to be failed';
    THROW 51000, '@ARR_IDa cannot be NULL', 1;
END

BEGIN TRAN T1
    INSERT INTO tblFlight
    (AirplaneID, FlightTypeID, DepartureAirportID, ArrivalAirportID, ArrivalTime, DepartureTime, FlightHrs)
    VALUES 
    (@AID_a, @FLTID_a, @DEP_IDa, @ARR_IDa, @ArrivalTimea, @DepartureTimea, @FlightHrs_a)
    IF @@ERROR <> 0
        BEGIN 
            PRINT 'There is an error - rolling back transaction T1'
            ROLLBACK TRAN T1
        END
    ELSE
COMMIT TRAN T1
GO

--insert into tblFlight_event--
CREATE PROCEDURE insIntoFlight_Event
@EventName_ VARCHAR(20), 
@EventDescr_ VARCHAR(100),
@ATName_ VARCHAR(50),
@Date_f DATE,
@FlightType_Name_f VARCHAR(20), 
@FlightType_Descr_f VARCHAR(100)
AS
DECLARE @EID INT, @FID INT

EXEC getEventID
@EventName = @EventName_,
@EventDescr = @EventDescr_,
@EventID = @EID OUTPUT

-- Error handle @EID in case if it's NULL/empty
IF @EID IS NULL
BEGIN 
    PRINT '@EID is empty and this will cause the transaction to be failed';
    THROW 51000, '@EID cannot be NULL', 1;
END

EXEC getFlightID
@AT_Name = @ATName_,
@Date_ = @Date_f,
@FlightType_Name_ = @FlightType_Name_f,
@FlightType_Descr_ = @FlightType_Descr_f,
@FlightID = @FID OUTPUT

-- Error handle @FID in case if it's NULL/empty
IF @FID IS NULL
BEGIN 
    PRINT '@FID is empty and this will cause the transaction to be failed';
    THROW 51000, '@FID cannot be NULL', 1;
END

BEGIN TRAN T1
    INSERT INTO tblFlight_Event
    (EventID, FlightID)
    VALUES 
    (@EID, @FID)
    IF @@ERROR <> 0
        BEGIN 
            PRINT 'There is an error - rolling back transaction T1'
            ROLLBACK TRAN T1
        END
    ELSE
COMMIT TRAN T1
GO

--insert into booking--
CREATE PROCEDURE newBooking
@PassengerFname_ VARCHAR(50),
@PassengerLname_ VARCHAR(50),
@PassengerBirth_ DATE,
@FlightHrs_ INT,
@FeeName_ VARCHAR(20),
@CustomerFname_ VARCHAR(50),
@CustomerLname_ VARCHAR(50),
@OrderDate_ DATE, 
@bookingAmount FLOAT
AS 
DECLARE
@P_ID INT, @F_ID INT, @Fe_ID INT, @O_ID INT
 
EXEC uspGetPassengerID
@Passenger_Fname = @PassengerFname_, 
@Passenger_Lname = @PassengerLname_, 
@Passenger_Birth = @PassengerBirth_, 
@Passenger_ID = @P_ID OUTPUT
 
IF @P_ID IS NULL 
    BEGIN 
        PRINT '@P_ID cannot be empty - will fail in transaction'; 
        THROW 51100, '@P_ID cannot be null',1; 
    END
 
EXEC getFlightID
@FlightHrs = @FlightHrs_, 
@FlightID = @F_ID OUTPUT
 
IF @F_ID IS NULL 
    BEGIN 
        PRINT '@F_ID cannot be empty - will fail in transaction'; 
        THROW 51200, '@F_ID cannot be null',1; 
    END

EXEC getFeeID
@FeeName = @FeeName_,
@FeeID = @Fe_ID OUTPUT
 
IF @Fe_ID IS NULL 
    BEGIN 
        PRINT '@Fe_ID cannot be empty - will fail in transaction'; 
        THROW 51200, '@Fe_ID cannot be null',1; 
    END
 
EXEC getCustomerID
@CustomerFname = @CustomerFname_, 
@CustomerLname = @CustomerLname_,
@OrderDate = @OrderDate_,
@OrderID = @O_ID OUTPUT
 
IF @O_ID IS NULL 
    BEGIN 
        PRINT '@O_ID cannot be empty - will fail in transaction'; 
        THROW 51200, '@O_ID cannot be null',1; 
    END

BEGIN TRAN T1
    INSERT INTO tblBooking
    (PassengerID, FlightID, FeeID, OrderID, BookingAmount)
    VALUES 
    (@P_ID, @F_ID, @Fe_ID, @O_ID, @bookingAmount)
    IF @@ERROR <> 0
        BEGIN 
            PRINT 'There is an error - rolling back transaction T1'
            ROLLBACK TRAN T1
        END
    ELSE
COMMIT TRAN T1
GO

--insert into booking_fee--
CREATE PROCEDURE insBookingFeeID
@Passenger_Fnamebf VARCHAR(50),
@Passenger_Lnamebf VARCHAR(50),
@Passenger_Birthbf DATE,
@FeeNamebf VARCHAR(20)
AS
DECLARE @BID_ INT, @F_ID_ INT

EXEC getBookingID
@Passenger_Fnameb = @Passenger_Fnamebf,
@Passenger_Lnameb = @Passenger_Lnamebf,
@Passenger_Birthb = @Passenger_Birthbf,
@PID_ = @BID_ OUTPUT

-- Error handle @PID_ in case if it's NULL/empty
IF @BID_ IS NULL
BEGIN 
    PRINT '@BID_ is empty and this will cause the transaction to be failed';
    THROW 51000, '@BID_ cannot be NULL', 1;
END

EXEC getFeeID
@FeeName = @FeeNamebf,
@FeeID = @F_ID_ OUTPUT

-- Error handle @F_ID_ in case if it's NULL/empty
IF @F_ID_ IS NULL
BEGIN 
    PRINT '@F_ID_ is empty and this will cause the transaction to be failed';
    THROW 51000, '@F_ID_ cannot be NULL', 1;
END

BEGIN TRAN T1
    INSERT INTO tblBooking_Fee
    (BookingID, FeeID)
    VALUES 
    (@BID_, @F_ID_)
    IF @@ERROR <> 0
        BEGIN 
            PRINT 'There is an error - rolling back transaction T1'
            ROLLBACK TRAN T1
        END
    ELSE
COMMIT TRAN T1
GO
--#########WRAPPERS#############--
--wrapper for Flight_event
CREATE PROCEDURE uspWRAPPER_newFlight_Event
@Run INT 
AS
DECLARE @EventCount INT = (SELECT COUNT(*) FROM tblEvent)
DECLARE @FlightCount INT = (SELECT COUNT(*) FROM tblFlight)


DECLARE @PK INT

WHILE @Run > 0 
BEGIN

SET @PK = (SELECT RAND() * @EventCount + 1)

SET @PK = (SELECT RAND() * @FlightCount + 1)

EXEC [insIntoFlight_Event]
SET @Run = @Run - 1
END

EXEC uspWRAPPER_newFlight_Event @Run = 1000;
GO

--wrapper for newBookingFee
CREATE PROCEDURE uspWRAPPER_newBookingFee
@Run INT 
AS
DECLARE @BookingCount INT = (SELECT COUNT(*) FROM tblBooking)
DECLARE @FeeCount INT = (SELECT COUNT(*) FROM tblFee)


DECLARE @PK INT

WHILE @Run > 0 
BEGIN

SET @PK = (SELECT RAND() * @BookingCount + 1)

SET @PK = (SELECT RAND() * @FeeCount + 1)

EXEC [insBookingFeeID]
SET @Run = @Run - 1
END

EXEC uspWRAPPER_newBookingFee @Run = 1000;
Go
--wrapper for Booking
CREATE PROCEDURE uspWRAPPER_newBooking
@Run INT 
AS
DECLARE @PassengerCount INT = (SELECT COUNT(*) FROM tblPassenger)
DECLARE @FlightCount INT = (SELECT COUNT(*) FROM tblFlight)
DECLARE @FeeCount INT = (SELECT COUNT(*) FROM tblFee)
DECLARE @OrderCount INT = (SELECT COUNT(*) FROM tblOrder)

DECLARE @BAmount FLOAT

DECLARE @PK INT

WHILE @Run > 0 
BEGIN

SET @PK = (SELECT RAND() * @PassengerCount + 1)
SET @PK = (SELECT RAND() * @FlightCount + 1)
SET @PK = (SELECT RAND() * @FeeCount + 1)
SET @PK = (SELECT RAND() * @OrderCount + 1)
SET @BAmount = (SELECT AreaCode FROM PEEPS.dbo.gthayJUNK2 WHERE CustomerID = @PK)

EXEC [newBooking]
@bookingAmount = @BAmount

SET @Run = @Run - 1
END

EXEC uspWRAPPER_newBooking @Run = 1000;
GO

--wrapper for Flight
CREATE PROCEDURE uspWRAPPER_newFlight
@Run INT 
AS
DECLARE @AirplaneCount INT = (SELECT COUNT(*) FROM tblAirplane)
DECLARE @FTypeCount INT = (SELECT COUNT(*) FROM tblFlight_Type)
DECLARE @DepCount INT = (SELECT COUNT(*) FROM tblAirport)
DECLARE @ArrCount INT = (SELECT COUNT(*) FROM tblAirport)

DECLARE @ArrTime TIME, @DepTime TIME, @FltHours FLOAT

DECLARE @PK INT

WHILE @Run > 0 
BEGIN

SET @PK = (SELECT RAND() * @AirplaneCount + 1)
SET @PK = (SELECT RAND() * @FTypeCount + 1)
SET @PK = (SELECT RAND() * @DepCount + 1)
SET @PK = (SELECT RAND() * @ArrCount + 1)

SET @ArrTime = (SELECT ArrivalTime FROM FlightTime WHERE RowID = @PK)
SET @DepTime = (SELECT DepartureTime FROM FlightTime WHERE RowID = @PK)
SET @FltHours = (SELECT FORMAT(DATEADD(ss,DATEDIFF(ss,[ArrivalTime], [DepartureTime] ),0),'hh:mm')
 FROM FlightTime WHERE RowID = @PK)

EXEC [insIntoFlight]
@ArrivalTimea = @ArrTime,
@DepartureTimea = @DepTime,
@FlightHrs_a = @FltHours


SET @Run = @Run - 1
END

EXEC uspWRAPPER_newFlight @Run = 1000;
GO
